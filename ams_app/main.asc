application.parseStreamName = function(publishQueryString) {
    queryArray = publishQueryString.split("?");

    queryObject = new Object();
    queryObject["channel"] = queryArray[0];
    queryObject["params"] = new Object();

    if (queryArray.length > 1) {
        queryParamsArray = queryArray[1].split("&");

        for (var i = 0; i < queryParamsArray.length; i++) {
            queryObject["params"][queryParamsArray[i].split("=")[0]] = queryParamsArray[i].split("=")[1];
        }
    }

    return queryObject;
}

application.banClient = function(ip, password) {
    trace("ip banned " + ip);

    banFile = new File("/bans/" + ip);
    banFile.open("text", "create");
    banFile.write(password);
    banFile.close();
}

application.writeClientInfo = function(client) {
    time = new Date().getTime();

    clientFile = new File("/clients/" + client.id);
    clientFile.open("text", "create");
    clientFile.writeln(client.id);
    clientFile.writeln(time);
    clientFile.writeln(client.ip);
    clientFile.writeln(client.agent);
    clientFile.writeln(client.pageUrl);
    clientFile.writeln(client.referrer);
    clientFile.close();
}

application.writeStreamInfo = function(stream, client) {
    time = new Date().getTime();

    streamFile = new File("/streams/" + stream.name);
    streamFile.open("text", "create");
    streamFile.writeln(client.id);
    streamFile.writeln(time);
    streamFile.writeln(client.ip);
    streamFile.writeln(client.agent);
    streamFile.writeln(client.pageUrl);
    streamFile.writeln(client.referrer);
    streamFile.close();
}

application.writeClientPassword = function(client, password) {
    clientFile = new File("/clients/" + client.id);

    if (clientFile.exists && password != null) {
        clientFile.open("text", "append");
        clientFile.write(password);
        clientFile.close();
    }
}

application.writeStreamPassword = function(stream, password) {
    streamFile = new File("/streams/" + stream.name);

    if (streamFile.exists && password != null) {
        streamFile.open("text", "append");
        streamFile.write(password);
        streamFile.close();
    }
}

application.onAppStart = function() {
    trace("onAppStart");

    dirNames = ["bans", "channels", "clients", "streams"];
    for (var i = 0; i < dirNames.length; i++) {
        dir = new File(dirNames[i]);

        if (!dir.exists) {
            trace(dir.name + " dir doesn't exist");
            new File("/").mkdir(dirNames[i]);
        }
    }

    clientsDir = new File("/clients/");
    clientFiles = clientsDir.list();
    for (var i = 0; i < clientFiles.length; i++) {
        clientFiles[i].remove();
    }
}

application.onConnect = function(client) {
    trace("onConnect");

    var ipFile = new File("/bans/" + client.ip);

    if (ipFile.exists) {
        trace("this ip is banned " + client.ip);
        return false;
    }

    application.writeClientInfo(client);

    return true;
}

Client.prototype.releaseStream = function(streamName) {
    trace("releaseStream");
    trace(streamName);

    parseObj = application.parseStreamName(streamName);

    trace("channel - " + parseObj.channel);
    trace("password - " + parseObj.params.password);

    s = Stream.get(parseObj.channel);

    channelFile = new File("/channels/" + parseObj.channel);

    if (!channelFile.exists) {
        trace("channel doesn't exist, streamer kicked");
        application.disconnect(this);
        return false;
    }

    channelFile.open("text", "read");
    password = channelFile.readln();
    channelFile.close();

    if (parseObj.params.password != password) {
        trace("bad password");
        application.banClient(this.ip, parseObj.params.password);
        application.disconnect(this);
        return false;
    }

    if (s) {
        trace("stream found");
        trace("stream time - " + s.time);

        if (s.time != 0) {
            trace("some stream is already running");
            s.play(parseObj.channel);
            return true;
        }
    } else {
        trace("stream not found");
    }

    return true;
}

Client.prototype.FCPublish = function(streamName) {
    trace("FCPublish");
}

application.onPublish = function(client, stream) {
    trace("onPublish");
    trace(stream.name);
    trace(stream.publishQueryString);

    parseObj = application.parseStreamName(stream.name + "?" + stream.publishQueryString);

    application.writeStreamInfo(stream, client);
    application.writeStreamPassword(stream, parseObj.params.password);
}

Client.prototype.FCUnpublish = function(streamName) {
    trace("FCUnpublish");
}

application.onUnpublish = function(client, stream) {
    trace("onUnpublish");

    Stream.destroy(stream);
}

Client.prototype.FCSubscribe = function(streamName) {
    trace("FCSubscribe");

    parseObj = application.parseStreamName(streamName);

    application.writeClientPassword(this, parseObj.params.password);
}

Client.prototype.FCUnsubscribe = function(streamName) {
    trace("FCUnsubscribe");
}

application.onDisconnect = function(client) {
    trace("onDisconnect");

    clientFile = new File("/clients/" + client.id);

    if (clientFile.exists) {
        clientFile.remove();
    }
}
